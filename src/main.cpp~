#include "Scena.hh"

using namespace std;

void WyswietlWspolDronow(Scena &Sc)
{
 // int j=0;
  list<Dron>::iterator i;
  cout << endl;
  cout << " Spis dronow i ich wspolrzednych (x, y, z):" << endl << endl;
  cout << "  nr drona |                    wspolrzedne" << endl;
  cout << " ------------------------------------------------------------" << endl;
  //for(*i=Sc[0]; j<3; ++i,++j);
//  cout << "     " << j+1 << "     |" << i->Wez_Wektor_Pozycji();
  cout << endl;
}
/*!
 * \brief Pyta użytkownika o numer drona do kontroli, pobiera je z klawiatury
 *        i zwraca informację czy go pobrano.
 *
 * Pyta użytkownika o numer drona do kontroli, pobiera je z klawiatury
 * i zwraca informację czy go pobrano.
 * \param[in] nr_drona - referencja do zmiennej reprezentującej numer drona.
 *
 * \pre Parametr nr_drona musi się odwoływać do odpowiedniej zmiennej,
 * \post Pobrano nr_drona.
 * \retval true - gdy nr_drona zostanie poprawnie pobrany.
 */
bool PobierzNrDrona(int &nr_drona)
{
  cout << " Podaj numer drona (1, 2 lub 3): ";
  cin >> nr_drona;
  while(cin.fail()||(nr_drona!=1&&nr_drona!=2&&nr_drona!=3))
    {
       cin.clear(); cin.ignore( 1000, '\n' );
       cout << " Nieznana lub niedodatnia wartosc. Wprowadz numer drona jeszcze raz."
            << endl;
       cin >> nr_drona;
    }
  nr_drona--;
  return true;
}

/*!
 * \brief Pyta użytkownika o dodatnią wartość skali powiększenia drona 
 *        (wartość mniejsza od 1 - pomniejszenia), pobiera je z klawiatury
 *        i zwraca informację czy ją pobrano.
 *
 * Pyta użytkownika o dodatnią wartość skali powiększenia drona 
 * (wartość mniejsza od 1 - pomniejszenia), pobiera je z klawiatury
 * i zwraca informację czy ją pobrano.
 * \param[in] skala - referencja do zmiennej reprezentującej numer drona.
 *
 * \pre Parametr skala musi się odwoływać do odpowiedniej zmiennej,
 * \post Pobrano skala.
 * \retval true - gdy skala zostanie poprawnie pobrany.
 */
bool PobierzSkale(double &skala)
{
  cout << " Podaj dodatnia wartosc skali wzgledem obecnych wymiarow drona: ";
  cin >> skala;
  while(cin.fail()||skala<=0)
    {
       cin.clear(); cin.ignore( 1000, '\n' );
       cout << " Nieznana lub niedodatnia wartosc. Wprowadz skale jeszcze raz."
            << endl;
       cin >> skala;
    }
  return true;
}

/*!
 * \brief Pyta użytkownika o długość elementarnego kroku w trakcie lotu drona
 *        w trakcie obrotu drona lub obrotu wirników (w zależności od 
 *        wywołania), pobiera je z klawiatury i zwraca informację czy je pobrano.
 *
 * Pyta użytkownika o długość elementarnego kroku w trakcie lotu drona
 * w trakcie obrotu drona lub obrotu wirników (w zależności od 
 * wywołania), pobiera je z klawiatury i zwraca informację czy je pobrano.
 * \param[in] krok - referencja do zmiennej reprezentującej krok,
 * \param[in] typ - zmienna reprezentująca typ pobieranych danych.
 *
 * \pre Parametr krok musi się odwoływać do odpowiedniej zmiennej,
 * \post Pobrano krok.
 * \retval true - gdy krok zostanie poprawnie pobrany.
 */
bool PobierzKrok(double &krok, int typ)
{
  cout << " Podaj dodatnia długosc elementarnego kroku "<< 
  (typ==2?"obrotu wirnikow: ":
  (typ==0?"w trakcie lotu drona: ":"w trakcie obrotu drona: "));
  cin >> krok;
  while(cin.fail()||krok<=0)
    {
       cin.clear(); cin.ignore( 1000, '\n' );
       cout << " Nieznana lub niedodatnia wartosc. Wprowadz wartosc jeszcze raz."
            << endl;
       cin >> krok;
    }
  return true;
}

/*!
 * \brief Pyta użytkownika o długość drogi i kąt wznoszenia/opadania, pobiera je z 
 *        klawiatury i zwraca informację czy je pobrano.
 *
 * Pyta użytkownika o długość drogi i kąt wznoszenia/opadania, pobiera je z 
 * klawiatury i zwraca informację czy je pobrano.
 * \param[in] droga - referencja do zmiennej reprezentującej drogę,
 * \param[in] kat_wzn - referencja do zmiennej reprezentującej kąt 
 *                      wznoszenia/opadania.
 *
 * \pre Parametr droga musi się odwoływać do odpowiedniej zmiennej,
 * \pre Parametr kat musi się odwoływać do odpowiedniej zmiennej.
 * \post Pobrano drogę i kąt.
 * \retval true - gdy droga i kąt zostaną poprawnie pobrane.
 */
bool PobierzDrogeIKat(double &droga, double &kat_wzn)
{
  cout << endl << endl;
  cout << " Podaj dodatnia dlugosc drogi przelotu i kat wznoszenia (+)/ opadania (-).";
  cout << endl;
  cout << "            Dlugosc drogi: ";
  cin >> droga;
  while(cin.fail()||droga<=0)
    {
      cin.clear();
      cin.ignore( 1000, '\n' );
      cout << " Nieznana lub niedodatnia wartosc. Wprowadz wspolrzedne jeszcze raz."
           << endl;
      cin >> droga;
    }
  cout << " Kat wznoszenia [stopnie] (z otwartego obustronnie przedzialu od "
       << "-90 do 90): ";
  cin >> kat_wzn;
  while(cin.fail()||kat_wzn>=90||kat_wzn<=-90)
    {
      cin.clear();
      cin.ignore( 1000, '\n' );
      cout << " Nieznana lub nieprawidlowa wartosc. Wprowadz kat jeszcze raz."
           << endl;
      cin >> kat_wzn;
    }
  return true;
}

/*!
 * \brief Pyta użytkownika okąt obrotu wyrażony w stopniach, pobiera 
 *        go z klawiatury i zwraca informację czy pobrano kąt obrotu.
 *
 * Pyta użytkownika okąt obrotu wyrażony w stopniach, pobiera 
 * go z klawiatury i zwraca informację czy pobrano kąt obrotu.
 * \param[in] kat_obrotu - zmienna reprezenująca kąt obrotu.
 *
 * \pre Parametr kat_obrotu musi się odwoływać do odpowiedniej zmiennej.
 * \post Pobrano kąt obrotu.
 * \retval true - gdy kąt obrotu zostaną poprawnie pobrane.
 */
bool PobierzKatObrotu(double &kat_obrotu)
{
  cout << " Podaj kat obrotu w stopniach: ";
  cin >> kat_obrotu;
  while(cin.fail()){
      cin.clear(); cin.ignore( 1000, '\n' );
      cout << "Nieznana wartosc. Wprowadz kat jeszcze raz." << endl;
      cin >> kat_obrotu;
  }
  return true;
}

/*!
 * \brief Wyświetla liczbę wektorów i menu programu.
 *
 * Wyświetla liczbę wektorów i menu programu.
 * \pre brak
 * \post Wyświetlono liczbę wektorów i menu.
 */
void WyswietlMenu()
{
  cout << endl << "Laczna ilosc stworzonych obiektow klasy Wektor3D: ";
  cout << Wektor<3>::WezIloscOgolem() << endl;
  cout << "      Ilosc istniejacych obiektow klasy Wektor3D: ";
  cout << Wektor<3>::WezIlosc() << endl;

  cout << endl;
  cout << " o - obrot drona" << endl;
  cout << " j - lot na wprost" << endl;
  cout << " s - skaluj drona" << endl;
  cout << " w - wyswietl ponownie menu" << endl << endl;
  cout << " k - zakoncz dzialanie programu" << endl;
}

/*!
 * \brief Uruchamia odpowiednie części programu w zależnności od wybranej opcji.
 *
 * Uruchamia odpowiednie części programu w zależnności od wybranej opcji.
 * \param[in] Lacze - referencja do klasy łączącej program z gnuplotem,
 * \param[in] Sc - referencja do obiektu reprezentującego scenę,
 * \param[in] wybor - zmienna reprezentująca wybraną opcję.
 *
 * \pre Parametr Lacze musi się odwoływać do odpowiedniej zmiennej,
 * \pre Parametr Sc musi się odwoływać do odpowiedniej zmiennej.
 * \post Wywołano odpowiednią opcję.
 */
void WyborOpcji(PzG::LaczeDoGNUPlota &Lacze,Scena &Sc,char wybor,int &nr_drona,
                                                    list<Dron>::iterator  dron)
{
  double                droga, kat_wzn, krok_lotu, krok_obr, krok_wir;
  double                kat_stopnie=0, skala;

  switch(wybor){
  case 'o':  /* obrót o kąt */
    if(PobierzKatObrotu(kat_stopnie)&&PobierzKrok(krok_obr,1)
                                    &&PobierzKrok(krok_wir,2))
      Sc.AnimacjaObrotu(Lacze,kat_stopnie, krok_obr, krok_wir,dron,nr_drona);
    break;
  case 'j':  /* przesunięcie o drogę i kąt */
    if(PobierzDrogeIKat(droga, kat_wzn)&&PobierzKrok(krok_lotu,0)
                                    &&PobierzKrok(krok_wir,2))
      Sc.AnimacjaLotu(Lacze,droga,kat_wzn,krok_lotu,krok_wir,dron,nr_drona);
    break;
 // case 's':  /* skalowanie drona */
   /* if(PobierzSkale(skala))
      Sc.SkalujDrona(Lacze, skala, nr_drona);
    break;*/
  case 'd':
    WyswietlWspolDronow(Sc);
    PobierzNrDrona(nr_drona);
    //*dron=Sc[nr_drona];
    break;
  case 'w':  /* wyświetlenie menu */
    WyswietlMenu();
  case 'k':  /* zakończenie programu */
    break;
  default:   /* nierozpoznana opcja */
    cout << " Nieznana opcja. Wybierz jeszcze raz." << endl;
    cin.clear();
    cin.ignore( 1000, '\n' );
  }
}

/*!
 * \brief Wyświetla drona i pyta użytkownika o kolejne opcje do wywołania, 
 *        zapisuje punkty drona i dla zapisanych wywołuje program gnuplot.
 *
 * Wyświetla drona i pyta użytkownika o kolejne opcje do wywołania, 
 * zapisuje punkty drona i dla zapisanych wywołuje program gnuplot.
 * \param[in] Lacze - referencja do klasy łączącej program z gnuplotem,
 * \param[in] Sc - referencja do obiektu reprezentującego scenę,
 *
 * \pre Parametr Lacze musi się odwoływać do odpowiedniej zmiennej.
 * \pre Parametr Sc musi się odwoływać do odpowiedniej zmiennej.
 * \post brak
 *
 * \retval true - gdy nastąpił błąd zapisu współrzędnych prostopadłościanu do pliku,
 * \retval false - w przeciwnym wypadku.
 */
bool ObslugaUzytkownika(PzG::LaczeDoGNUPlota &Lacze, Scena &Sc)
{
  char                  wybor='d';
  int                   nr_drona=0;
  list<std::shared_ptr<Dron>>::iterator  dron;

 // Lacze.Rysuj(); // <- Tutaj gnuplot rysuje, to co zapisaliśmy do pliku
 
  WyswietlMenu();
  WyswietlWspolDronow(Sc);
  PobierzNrDrona(nr_drona);
  //*dron=Sc[nr_drona];
  while(wybor!='k')
    {
      cout << endl << " Twoj wybor (m - wyswietl menu)> ";
      cin >> wybor;
      WyborOpcji(Lacze, Sc, wybor,nr_drona,dron);

      if(wybor=='o'||wybor=='j'||wybor=='s'){ 
        cout << endl << endl;
        cout << endl << "Laczna ilosc stworzonych obiektow klasy Wektor3D: ";
        cout << Wektor<3>::WezIloscOgolem() << endl;
        cout << "      Ilosc istniejacych obiektow klasy Wektor3D: ";
        cout << Wektor<3>::WezIlosc() << endl;
      }
    }
  cout << endl << " Koniec dzialania programu." << endl << endl;
  return false;
}

/*!
 * \file main.cpp
 * \brief Moduł główny
 */

/*!
 * \brief Funkcja główna.
 *
 * Funkcja główna.
 * \pre brak
 * \post brak
 *
 * \retval true - gdy program został przerwany,
 * \retval false - gdy program zakończył się poprawnie.
 */
int main()
{
  Scena                 Sc;   // To tylko przykladowe definicje zmiennej
  PzG::LaczeDoGNUPlota  Lacze;  // Ta zmienna jest potrzebna do wizualizacji
                                // rysunku prostokata

  Lacze.DodajNazwePliku(NAZWA_PLIKU__1PROSTOPADLOSCIAN);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__1GRANIATOSLUP_1);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__1GRANIATOSLUP_2);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__1GRANIATOSLUP_3);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__1GRANIATOSLUP_4);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__2PROSTOPADLOSCIAN);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__2GRANIATOSLUP_1);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__2GRANIATOSLUP_2);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__2GRANIATOSLUP_3);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__2GRANIATOSLUP_4);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__3PROSTOPADLOSCIAN);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__3GRANIATOSLUP_1);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__3GRANIATOSLUP_2);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__3GRANIATOSLUP_3);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__3GRANIATOSLUP_4);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__PRZESZKODA1);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__PRZESZKODA2);
  Lacze.DodajNazwePliku(NAZWA_PLIKU__PRZESZKODA3);

  Lacze.ZmienTrybRys(PzG::TR_3D);
 // Lacze.Inicjalizuj();  // Tutaj startuje gnuplot.

  Lacze.UstawZakresX(-190, 250);
  Lacze.UstawZakresY(-160, 250);
  Lacze.UstawZakresZ(-120, 200);

  Lacze.UstawRotacjeXZ(64,65); // Tutaj ustawiany jest widok
  Sc.Inicjuj();

  return ObslugaUzytkownika(Lacze, Sc);
}
